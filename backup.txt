import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import styles from './Login.module.css'; 
import axios from 'axios';
import { ToastContainer, toast, Bounce} from 'react-toastify';

export const Login = () => {
  
  const navigate = useNavigate();  // Redirect after login
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });

  const [errors, setErrors] = useState({});
  const [loading, setloading] = useState(false); //loading state

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    // setFormData({ ...formData, [name]: value });
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  // Form Validation
  const validateForm = () => {
    let newErrors = {};
    
    if (!formData.email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      newErrors.email = 'Enter a valid email';
    }
    
    if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async(e) => {
    e.preventDefault();
    // if (validateForm()) {
    //   console.log("Form Submitted Data:", formData);
    //   alert("Login successful!");
    //   navigate('/user'); // Redirect to Dashboard
    // }

    if(!validateForm()) return;

    setloading(true); //start loading

    try{
      const res = await axios.post('/user/login',formData);
      console.log("API Response: ",res.data)
      
      if(res.status === 200){
          //alert("login successfully..");
                   // //localStorage.setItem("id",res.data.data._id)
            localStorage.setItem("id",JSON.stringify(res.data.data._id))
            localStorage.setItem("role", JSON.stringify(res.data.data.roleId.name));

            toast('ðŸŒŸlogin successfully!', {
              position: "top-center",
              autoClose: 1000,
              hideProgressBar: false,
              closeOnClick: false,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "colored",
              transition: Bounce,
              onClose: () => {
                // navigate('/user/profile')
                setTimeout(() =>{
                  if(res.data.data.roleId.name === "CUSTOMER"){
                      navigate("/user/profile")
                    }
                    if(res.data.data.roleId.name === "ADMIN"){
                      navigate("/user")
                    }
                    if(res.data.data.roleId.name === "VENDOR"){
                      navigate("/vendor/demoform")
                    }
                }, 500)
              }
            });
            // //localStorage.setItem("id",res.data.data._id)
            // localStorage.setItem("id",JSON.stringify(res.data.data._id))
            // localStorage.setItem("role", JSON.stringify(res.data.data.roleId.name));

            // if(res.data.data.roleId.name === "CUSTOMER"){
            //   navigate("/user/profile")
            // }
            // if(res.data.data.roleId.name === "ADMIN"){
            //   navigate("/user")
            // }
            // if(res.data.data.roleId.name === "VENDOR"){
            //   navigate("/vendor/demoform")
            // }
          //delay to allow toaster to be visible
          // serTimeout(()=>{
          //   navigate('/user/profile');
          // },3000)
          
      }
      else{
        setErrors({
          general: "Invalid email or password"
        })
      }
    }
    catch(error){
      console.error("login Error: ", error.response?.data || error.message);
      setErrors({general: error.response?.data?.message || "Invalid credentials or service error"});
    }finally{
      setloading(false);
    }
    // catch(error){
    //     console.error("login Error: ",error);
    //     setErrors({
    //       general: "Invalid credentials or service error"});
    //     }finally {
    //       setloading(false); //stop loading
    //     }
  };

  return (
<>
<ToastContainer
position="top-center"
autoClose={3000}
hideProgressBar={false}
newestOnTop={false}
closeOnClick={false}
rtl={false}
pauseOnFocusLoss
draggable
pauseOnHover
theme="dark"
transition={Bounce}
/>
    <div className={styles.loginContainer}>
      <form onSubmit={handleSubmit} className={styles.loginForm}>
        {errors.general && (<small className='text-danger d-block text-center'>{errors.general}</small>)}
        <h1 className={styles.loginTitle}>Sign In</h1>
        <hr />
        
        {errors.general && <small className={styles.errorText}>{errors.general}</small>}

        <div>
          <div className={styles.inputGroup}>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"/>
            </svg>
            <input
              type="email"
              name="email"
              placeholder="Email"
              value={formData.email}
              onChange={handleChange}
              autoFocus
              required
            />
          </div>
          {errors.email && <small className={styles.errorText}>{errors.email}</small>}
        </div>

        <div>
          <div className={styles.inputGroup}>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd"/>
            </svg>
            <input
              type="password"
              name="password"
              placeholder="Password"
              value={formData.password}
              onChange={handleChange}
              required
            />
          </div>
          {errors.password && <small className={styles.errorText}>{errors.password}</small>}
        </div>

        <button type="submit" className={styles.loginButton} disabled={loading}>
          {loading ? "Logging in..." : "Login"}</button>

        <hr />
        <p className={styles.registerText}>
          Don't have an account?
          <Link to="/signup"> Register now â†’</Link>
        </p>
      </form>
    </div>
    </> 
  );
};

----------
import axios from 'axios'
import React, { useState } from 'react'
import { useEffect } from 'react'
import { useForm } from 'react-hook-form'

export const AddProduct = () => {
 
    const [categories, setcategories] = useState([])
    const [subCategories, setsubCategories] = useState([])
    const getAllCategories = async() =>{
        const res = await axios.get("/category/getcategories")
        console.log(res.data)
        setcategories(res.data.data)
    }

    const getSubCategoryByCategoryId = async(id) =>{
       //alert(id);
       //api calling
            const res = await axios.get("/subcategory/getsubcategorybycategory/"+id)
            console.log("Sub category response: ",res.data)
            setsubCategories(res.data.data)
       
    }

    useEffect(() =>{
        getAllCategories()
    },[])
 
const {register,handleSubmit} = useForm()

const submitHandler = async(data) =>{
    //console.log(data);
    const sellerId = localStorage.getItem("id")
    data.sellerId = sellerId;
    //console.log(data)
    const res =  await axios.post("/product/addproduct",data)
    console.log(res)

}

    return (
    <div style={{textAlign:"center"}}>
        <h1>ADD PRODUCT</h1>
        <form onSubmit={handleSubmit(submitHandler)}>
            <div>
                <label>Product Name:</label>
                <input type='text' {...register("productName")}></input>
            </div>
            <div>
                <label>Base Price:</label>
                <input type='Number' {...register("basePrice")}></input>
            </div>
            <div>
                <label>Offer Price:</label>
                <input type='NUmber' {...register("offerPrice")}></input>
            </div>
            <div>
                <label>Offer Percentage:</label>
                <input type='Number' {...register("offerPercentage")}></input>
            </div>
            <div>
                <label>Product Detail:</label>
                <input type='text' {...register("productDetail")}></input>
            </div>
            <div>
                <label>Product Images:</label>
                <input type='text' {...register("productImages")}></input>
            </div>
            <div>
                <label>quantity:</label>
                <input type='Number' {...register("quantity")}></input>
            </div>
            {/* <div>
                <label></label>
                <input type='' {...register("")}></input>
            </div> */}
        <div>
            <label>Category: </label>
            <select {...register("categoryId")} onChange={(event)=>{getSubCategoryByCategoryId(event.target.value)}}> //id name from model table
                {
                    categories?.map((category) =>{
                        return <option value={category._id}>{category.name}</option>
                    })
                }
            </select>
        </div>
        <div>
            <label>Sub-Category: </label>
            <select {...register("subCategoryId")}>
                {
                    subCategories?.map((subCategory) =>{
                        return <option value={subCategory._id}>{subCategory.name}</option>
                    })
                }
            </select>
        </div>
        <div>
            <input type='submit'></input>
        </div>
        </form>
    </div>
  )
}

//homepage
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { FaShoppingCart, FaSearch, FaTags, FaUser } from "react-icons/fa";

// Reusable Product Card Component
const ProductCard = ({ product }) => {
  return (
  //   <div className="bg-white p-4 shadow-md hover:shadow-lg transition-all w-full text-center max-w-[250px] mx-auto">
  //   <img
  //     className="w-full h-36 object-cover rounded-md mb-3"
  //     src={product.productImages || "https://via.placeholder.com/250"}
  //     alt={product.productName}
  //   />
  //   <h4 className="text-lg font-semibold">{product.productName}</h4>
  //   <p className="text-green-600 font-bold text-xl mt-1">â‚¹{product.offerPrice || product.basePrice}</p>
  //   <button className="mt-3 bg-green-600 text-white px-4 py-2 rounded text-sm font-semibold hover:bg-green-700 transition-all w-full flex justify-center items-center gap-2">
  //     <FaShoppingCart size={14} /> Add to Cart
  //   </button>
  // </div>
  <div className="bg-white rounded-md shadow-md hover:shadow-lg transition-all w-full max-w-[250px] mx-auto flex flex-col">
      {/* Image - Takes Half of the Card */}
      <div className="h-1/2">
        <img
          className="w-full h-28 object-cover rounded-t-md"
          src={product.productImages || "https://via.placeholder.com/250"}
          alt={product.productName}
        />
      </div>

      {/* Details - Takes the Other Half */}
      <div className="p-3 flex flex-col justify-between h-1/2">
        <h4 className="text-lg font-semibold">{product.productName}</h4>
        <p className="text-green-600 font-bold text-xl">â‚¹{product.offerPrice || product.basePrice}</p>
        <button className="mt-2 bg-green-600 text-white px-3 py-1.5 rounded text-sm font-semibold hover:bg-green-700 transition-all flex items-center gap-2 justify-center">
          <FaShoppingCart size={14} /> Add to Cart
        </button>
      </div>
    </div>
  );
};

export const HomePage = () => {
  const [categories, setCategories] = useState([]);
  const [products, setProducts] = useState([]);

  useEffect(() => {
    fetchCategories();
    fetchProducts();
  }, []);

  const fetchCategories = async () => {
    try {
      const res = await axios.get("/category/getcategories");
      console.log(res.data)
      setCategories(res.data.data || []);
    } catch (error) {
      console.error("Error fetching categories:", error);
    }
  };

  const fetchProducts = async () => {
    try {
      const res = await axios.get("/product/getproducts");
      setProducts(res.data.data || []);
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };

  return (
    <div className="bg-gray-100 overflow-x-hidden w-full">
      {/* Navbar */}
      <nav className="bg-white shadow-md py-4 px-6 flex justify-between items-center max-w-screen-3xl mx-auto w-full">
        <h1 className="text-3xl font-bold text-green-600">FMCG Hub</h1>
        <div className="flex items-center gap-6">
          <input
            type="text"
            placeholder="Search products..."
            className="border rounded-lg px-4 py-3 focus:outline-none w-96"
          />
          <FaSearch className="text-gray-600 cursor-pointer text-xl" />
          <Link to="/cart" className="text-green-600">
            <FaShoppingCart size={28} />
          </Link>
          <Link to="/user/profile" className="text-green-600">
            <FaUser size={28} />
          </Link>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="bg-green-700 text-white py-24 px-10 text-center max-w-screen-3xl mx-auto w-full rounded-lg mt-8">
        <h2 className="text-5xl md:text-7xl font-bold mb-6">Exclusive Deals on FMCG Products</h2>
        <p className="text-2xl mb-10">Discover the best offers on daily essentials & groceries.</p>
        <Link
          to="/shop"
          className="bg-white text-green-600 px-10 py-4 rounded-lg text-xl font-semibold hover:bg-gray-200"
        >
          Shop Now
        </Link>
      </section>

      {/* Category Section */}
      <section className="py-14 px-10 max-w-screen-3xl mx-auto w-full">
        <h3 className="text-4xl font-bold text-gray-800 mb-10 text-center">Shop by Category</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8 w-full">
          {categories.length > 0 ? (
            categories.map((category) => (
              <Link
                key={category._id}
                 //to={`/subcategory/getsubcategorybycategory/${category._id}`}
                 to={`/subcategory/${category._id}`}
                className="bg-white p-8 rounded-lg shadow text-center hover:shadow-lg w-full max-w-[320px] mx-auto flex flex-col items-center"
              >
                <FaTags className="text-green-600 text-4xl mb-4" />
                <span className="text-xl font-semibold">{category.name}</span>
              </Link>
            ))
          ) : (
            <p className="text-center text-gray-500 col-span-4">No categories available.</p>
          )}
        </div>
      </section>

      {/* Featured Products */}
      {/* <section className="py-14 px-10 max-w-screen-3xl mx-auto w-full">
        <h3 className="text-4xl font-bold text-gray-800 mb-10 text-center">Best Selling Products</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-10 w-full">
          {products.length > 0 ? (
            products.map((product) => (
              <div key={product._id} className="bg-white p-8 rounded-lg shadow hover:shadow-lg w-full max-w-[360px] mx-auto text-center">
                <img src={product.productImages} alt={product.productName} className="w-full mb-5 rounded-md" />
                <h4 className="text-2xl font-bold">{product.productName}</h4>
                <p className="text-green-600 font-semibold text-3xl">â‚¹{product.offerPrice}</p>
                <button onClick={() => addToCart(product._id)} className="px-4 py-2 bg-green-600 text-white rounded-lg">
              Add to Cart
              </button>
              </div>
            ))
          ) : (
            <p className="text-center text-gray-500 col-span-4">No products available.</p>
          )}
        </div>
      </section> */}
      <section className="py-14 px-10 w-full">
        <h3 className="text-4xl font-bold text-gray-800 mb-10 text-center">Best Selling Products</h3>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-10 w-full">
          {products.length > 0 ? (
            products.map((product) => <ProductCard key={product._id} product={product} />)
          ) : (
            <p className="text-center text-gray-500 col-span-4">No products available.</p>
          )}
        </div>
      </section>
    </div>
  );
};

export default HomePage;

